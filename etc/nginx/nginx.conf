user  nobody;
worker_processes  1;

env DIT4C_INSTANCE_HTTP_PORT;
env CLIENT_ID;
env CLIENT_SECRET;
env DIT4C_INSTANCE_OAUTH_AUTHORIZE_URL;
env DIT4C_INSTANCE_OAUTH_ACCESS_TOKEN_URL;

error_log /dev/stdout info;

events {
  worker_connections  1024;
}


http {
  access_log /dev/stdout;
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;

  keepalive_timeout  65;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  map $http_x_forwarded_proto $user_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
  }

  lua_shared_dict sessions 1m;

  server {
    include listen.conf;
    server_name  _;

    set $session_cookie_name "DIT4C_INSTANCE_SESSION";
    set_by_lua_block $client_id {
      return os.getenv("CLIENT_ID");
    }
    set_by_lua_block $client_secret {
      return os.getenv("CLIENT_SECRET");
    }
    set_by_lua_block $authorize_url {
      return os.getenv("DIT4C_INSTANCE_OAUTH_AUTHORIZE_URL");
    }
    set_by_lua_block $access_token_url {
      return os.getenv("DIT4C_INSTANCE_OAUTH_ACCESS_TOKEN_URL");
    }

    location / {
      set_by_lua_block $upstream_port {
        return os.getenv("DIT4C_INSTANCE_HTTP_PORT");
      }
      access_by_lua_block {
        local session_id = ngx.var['cookie_' .. ngx.var.session_cookie_name]
        if ngx.shared.sessions:get(session_id) then
          return
        else
          if ngx.req.get_uri_args()['code'] then
            -- Should always read body before using capture
            ngx.req.read_body()
            -- Check we can get a valid access token
            local res = ngx.location.capture('/access_token_url', {
              ctx = { code = ngx.req.get_uri_args()['code'] }
            })
            if res.status == 200 then
              ngx.exec('@redirect_to_service')
            else
              ngx.header.content_type = 'text/plain'
              ngx.say("Auth code was rejected: " .. res.status ..
                "\n" .. res.body)
              ngx.exit(ngx.HTTP_FORBIDDEN)
            end
          else
            local cookie = ngx.var.session_cookie_name .. "="
            ngx.header['Set-Cookie'] = { cookie .. '; path=/' }
            ngx.exec('@oauth_redirect')
          end
        end
      }
      proxy_pass http://127.0.0.1:$upstream_port;
      proxy_http_version 1.1;
      proxy_buffering off;
      proxy_read_timeout 1d; # Allow websockets to idle
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header X-Forwarded-Proto $user_proto;
      proxy_set_header X-Forwarded-Host $http_host;
    }

    location @oauth_redirect {
      internal;
      set_by_lua_block $redirect_uri {
        return (
          ngx.var.user_proto .. "://" ..
          ngx.var.http_host .. ngx.var.request_uri
        )
      }
      content_by_lua_block {
        ngx.req.set_uri_args({
          client_id = ngx.var.client_id,
          redirect_uri = ngx.var.redirect_uri
        })
        ngx.redirect(ngx.var.authorize_url .. "?" .. ngx.var.args)
      }
    }

    location /access_token_url {
      internal;
      set_by_lua_block $authorization_code {
        return ngx.ctx.code
      }
      set_escape_uri $escaped_client_id $client_id;
      set_escape_uri $escaped_client_secret $client_secret;
      set_escape_uri $escaped_code $authorization_code;
      proxy_set_header "Content-Type" "application/x-www-form-urlencoded";
      set_by_lua_block $form {
        return (
          "client_id=" .. ngx.var.escaped_client_id .. "&" ..
          "client_secret=" .. ngx.var.escaped_client_secret .. "&" ..
          "code=" .. ngx.var.authorization_code .. "&" ..
          "grant_type=authorization_code" )
      }
      proxy_method POST;
      proxy_pass $access_token_url;
      proxy_set_body $form;
      proxy_http_version 1.1;
      resolver 8.8.8.8;
    }

    location @redirect_to_service {
      internal;
      set_secure_random_alphanum $new_session_id 32;
      content_by_lua_block {
        -- Add session cookie
        ngx.shared.sessions:set(ngx.var.new_session_id, true)
        local cookie = ngx.var.session_cookie_name .. "=" .. ngx.var.new_session_id
        ngx.header['Set-Cookie'] = { cookie .. '; path=/' }
        -- Remove code from args
        local args = ngx.req.get_uri_args()
        args['code'] = nil
        ngx.req.set_uri_args(args)
        return ngx.redirect(ngx.var.uri .. '?' .. ngx.var.args)
      }
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }

  }

}
